diff --git a/monitor.b b/monitor.b
index 225b036..1969bd4 100644
--- a/monitor.b
+++ b/monitor.b
@@ -13,8 +13,7 @@
 ; 
 ; -------------------------------------------------------------------------------------------------
 ; switches
-;P500	= 1
-OPTI	= 1	;optimizations
+P500	= 1
 !ifdef P500{
 	!to "monitor500.prg", cbm
 	!initmem $00
@@ -23,13 +22,8 @@ OPTI	= 1	;optimizations
 	!initmem $ff
 }
 DEFDEV 	= 8		;default device	
-!ifdef OPTI{
 DISDEF	= 23		;bytes to disassemble by default
 MEMDEF	= 8		;lines to display memory
-} else{
-DISDEF	= 20		;bytes to disassemble by default
-MEMDEF	= 12		;lines to display memory
-}
 !ifdef P500{
 DEFBANK	= 0		;if no address, load to this bank 
 COLS	= 0		;40 columns
@@ -167,10 +161,7 @@ cpyregs:pla		;pull pc, registers & status off stack...
 call:			;////// entry for 'jmp' or 'sys'
 !ifdef P500{
 	lda #$00
-	sta mode	;set 40 column mode
-	nop
 } else{
-!ifdef OPTI{
 	lda #<bellmd	;set pointer to bell flag
 	sta ptr
 	lda #>bellmd
@@ -182,10 +173,6 @@ call:			;////// entry for 'jmp' or 'sys'
 	sta (ptr),y	;disable bell (some value > 0)
 	stx i6509	;restore ibank	
 	tya
-	} else{
-	jsr setmod	;set 40/80 col mode, disable bell for m-command if b-machine
-	lda #$00
-	}
 }
 	sta acc		;clear everything up for user
 	sta xr
@@ -374,9 +361,6 @@ getstat:ldx i6509	;remember ibank
 	lda (ptr),y	;get status
 	stx i6509	;restore ibank
 	rts
-!ifndef OPTI{
-!fill 10,$ff
-}
 ;********************************************
 ;	Display memory command
 ;********************************************
@@ -395,14 +379,7 @@ dspdef:	lda #MEMDEF-1  	;do default lines
 dspcalc:jsr sub0m2	;calculate # bytes, put result in t0 (msb goes in .a)
 	bcc dsperr	;...branch if sa > ea
 ; shift 3/4 bits right for 8/16 bytes per line
-!ifdef OPTI{
 	ldx #$03+COLS	;add 1 if 80 columns
-} else{
-	ldx #$03
-	bit mode	;divide by 8 if 40-col, 16 if 80-col
-	bpl dspshft
-	inx
-}
 dspshft:lsr t0+2	;shift msb right,
 	ror t0+1	;..into middle byte,
 	ror t0		;..and finally into lsb
@@ -413,14 +390,7 @@ dspdump:jsr stop	;is stop key down?
 	beq dspexit	;..if so, exit.
 
 	jsr dmpone
-!ifdef OPTI{
 	lda #8*(COLS+1)	;8/16 bytes per line for 40/80 columns
-} else{
-	lda #8
-	bit mode	;add 8 (16 if 80-col) to line start address
-	bpl dsp40c
-	asl
-}
 dsp40c	jsr addt2
 	jsr dect0	;test if dump finished
 	bcs dspdump	;loop until underflow
@@ -457,17 +427,8 @@ setmlp:	jsr parse	;scan for next argument
 	lda t0		;get the byte to stash
 	jsr stash	;stash it
 	iny
-!ifdef OPTI{
 	cpy #8*(COLS+1)	;8/16 bytes per line for 40/80 columns
 	bcc setmlp
-} else{
-	bit mode
-	bpl setm40c
-	cpy #16
-	bcc setmlp
-setm40c:cpy #8
-	bcc setmlp
-}
 setmx:	jsr primm	;clear all modes & cursor up
 	!pet esc, "o", $91, 0
 
@@ -485,15 +446,6 @@ go:
 	txs		;set up stack pointer
 	jmp goto
 ; gosub moved to the end
-	nop
-	nop
-	nop
-	nop
-	nop
-	nop
-	nop
-	nop
-	nop
 ;********************************************
 ;	Subroutine to dump one line
 ;	of memory on screen
@@ -511,16 +463,8 @@ dmpbylp:jsr putspc
 dmpentr:jsr fetch	;get a byte from memory
 	jsr puthex	;print hex byte
 	iny
-!ifdef OPTI{
 	cpy #8*(COLS+1)	;8/16 bytes per line for 40/80 columns
 	bcc dmpbylp
-} else{
-	cpy #8		;8 bytes/line for 40-column mode
-	bit mode
-	bpl dmp40c
-	cpy #16		;16 bytes/line for 80-column mode
-dmp40c:	bcc dmpbylp
-}
 	jsr primm	;block off ascii dump & turn rvs on
 	!pet ":", $12, 0
 
@@ -535,17 +479,8 @@ dmpchlp:jsr fetch	;re-get byte from memory
 
 dmpskct:jsr bsout
 	iny
-!ifdef OPTI{
 	cpy #8*(COLS+1)	;8/16 bytes per line for 40/80 columns
 	bcc dmpchlp
-} else{
-	bit mode
-	bpl dmp40c2
-	cpy #16
-	bcc dmpchlp
-dmp40c2:cpy #8
-	bcc dmpchlp
-}
 	rts
 ;********************************************
 ;	Transfer/Compare routines.
@@ -664,11 +599,6 @@ hunnxch:sta xcnt,y
 	beq hunstrt	;yes-go look for it
 
 hunhex:	
-!ifdef OPTI{
-;!fill 3, $ff
-} else{
-	sty bad		;zero for rdob
-}
 	jsr pargot	;finish hex read
 
 hunnxhx:lda t0
@@ -715,11 +645,7 @@ hunerr:	jmp error
 lodsav:
 	jsr lsinit	;init defaults, returns with .y = 0
 lsspc:  jsr gnc		;look for name
-!ifdef OPTI{
 	beq lserr	;cbm2 non-tape system has no load without name
-} else{
-	beq lsload	;branch if no name (must be default load)
-}
 	cmp #' '
 	beq lsspc	;skip spaces
 	cmp #$22	;quote
@@ -752,9 +678,6 @@ lsdev:	stx txtptr
 
 	jsr parse	;get ending address
 	bcs loadadr	;none...must be 'alternate load'
-!ifndef OPTI{
-	jsr crlf	;prep for 'saving...' msg
-}
 	lda verck
 	cmp #'s'	;check that this is a save
 	bne lserr
@@ -773,23 +696,17 @@ lsadrcp:lda t2,x
 	ldx #stal	;load parameter addresses for kernal routine
 	ldy #eal
 	jsr _save	;do save
-!ifdef OPTI{
 	lda #0
 	sta fnlen
 	sta buf
 	sta txtptr
 	jmp chksave
-} else{
-	jmp main
-}
 
 lsload: ldx #$ff
 	stx t2		;load to saved address
 	stx t2+1
-!ifdef OPTI{
 	ldx #DEFBANK
 	stx t2+2	;default is first ram bank 0/1
-}
 loadadr:lda #0		;flag 'non-default load'
 	sta sa
 	jsr fparcpy	;copy file parameter to system bank
@@ -806,20 +723,16 @@ verify	lda #$80	;flag for verify
 	ldy t2+1
 	ora t2+2	;or verify flag to bank
 	jsr _load	;do load/verify
-!ifdef OPTI{
 	bcs verifyx
 	lda verck
 	cmp #'v'	;check for verify
 	beq verchk
 verifyx:jmp main
-}
+
 verchk:	jmp lsstate	;print verify result
 ;******************************************************************
 ;	Fill command - F starting-address ending-address value
 ;******************************************************************
-!ifndef OPTI{
-!fill 16, $ff
-}
 ; $e3db
 fill:
 	jsr range	;sa in t2, len in t1
@@ -1804,23 +1717,14 @@ dskdev: ldx t0		;get given device #
 	bcc baddev	;...branch if bad device #
 	cpx #31
 	bcs baddev
-!ifdef OPTI{
 	stx fa		;set first address
 	lda e6509
 	sta fnadr+2	;set filename bank (in case DIR cmd)
-} else{
-	stx t0
-}
 
 	lda #0
 	sta t0+2	;clear line # register (in case DIR cmd)
 	sta fnlen	;reset command string length for status
-!ifdef OPTI{
 	sta la		;set logical index
-} else{
-	tax
-	jsr setbnk	;cmd string in ram0 (in case DIR cmd)
-}
 	
 	jsr gnc		;peek at first character of disk command
 	dec txtptr	;backup so we will re-get this character later
@@ -1828,17 +1732,10 @@ dskdev: ldx t0		;get given device #
 	beq disk_dir	;...branch if directory read
 
 ; open disk command channel & pass it given command
-!ifdef OPTI{
 chksave:lda #15		;command channel
 	sta sa		;set secondary address
 	jsr fparcpy	;copy file parameter to system bank
 	clc
-} else{
-	lda #0		;la
-	ldx t0		;fa
-	ldy #15		;sa
-	jsr setlfs
-}
 	jsr open	;open disk command channel (c=0)
 	bcs disk_done	;...branch on error
 
@@ -1860,7 +1757,6 @@ disk_st
 	jsr chkin	;make it an input channel
 	bcs disk_done	;...branch on error
 
-!ifdef OPTI{
 	jsr basin	;get a character from disk
 	cmp #cr
 	beq nodev	;...no device? if first char cr
@@ -1869,17 +1765,7 @@ dskchlp:jsr bsout	;print it
 	cmp #cr
 	beq disk_done	;...branch if eol
 	bne dskchlp	;...loop until error or eol
-} else{
-dskchlp:jsr basin	;get a character from disk
-	jsr bsout	;print it
-	cmp #cr
-	beq disk_done	;...branch if eol
-	lda fnadr
-	and #$bf	;strip eoi bit
-	beq dskchlp	;...loop until error or eol
-}
 
-!ifdef OPTI{
 baddev:
 	jmp error	;bad device number error
 
@@ -1891,7 +1777,6 @@ dir_done:
 nodev:
 jsr primm
 !pet "no device?",0	;if only got cr, no dev present error
-}
 
 disk_done:
 	jsr clrch	;clear channel
@@ -1900,10 +1785,6 @@ disk_done:
 	jsr close	;close device (c=1)
 	jmp main
 
-!ifndef OPTI{
-baddev:
-	jmp error
-}
 ; read & display the disk directory
 disk_dir:
 	ldy #$ff	;determine directory string length
@@ -1915,7 +1796,6 @@ dirchlp:iny
 	lda buf,x	;get a character
 	bne dirchlp	;...loop until eol
 
-!ifdef OPTI{
 	sty fnlen
 	lda txtptr
 	sta fnadr
@@ -1925,54 +1805,27 @@ dirchlp:iny
 	sta sa
 	jsr fparcpy	;copy file parameter to system bank
 	clc
-} else{
-	tya		;length
-	ldx txtptr	;fnadr low
-	ldy #>buf	;fnadr high
-	jsr setnam	
-	lda #0		;la
-	ldx t0		;fa
-	ldy #$60	;sa
-	jsr setlfs
-}
 	jsr open	;open directory channel
 	bcs disk_done	;...branch on error
 	ldx #0
 	jsr chkin	;make it an input channel
 
-!ifndef OPTI{
-	jsr crlf	;start a new line
-}
-
 	ldy #3		;first pass only- trash first two bytes read
 
 dirlp:  sty t1		;loop counter
 dirbklp:jsr basin
 	sta t0		;get # blocks low
-!ifdef OPTI{
 	jsr getdirstat
 	lda status
 	bne dir_done	;...branch if error
-} else{
-	lda fnadr
-	bne disk_done	;...branch if error
-}
 	jsr basin
 	sta t0+1	;get # blocks high
-!ifdef OPTI{
 	jsr getdirstat
 	lda status
 	bne dir_done	;...branch if error
-} else{
-	lda fnadr
-	bne disk_done	;...branch if error
-}
 	dec t1
 	bne dirbklp	;...loop until done
-
-!ifdef OPTI{
 	jsr crlf	;start a new line
-}
 	jsr bindec	;convert # blocks to decimal
 	lda #0		;no leading zeros
 	ldx #8		;max digits
@@ -1983,42 +1836,19 @@ dirbklp:jsr basin
 
 dirfnlp:jsr basin	;read & print filename & filetype
 	beq direol	;...branch if eol
-!ifdef OPTI{
 	jsr getdirstat
 	ldx status
 	bne disk_done	;...branch if error
-} else{
-	ldx fnadr
-	bne disk_done	;...branch if error
-}
 	jsr bsout
 	bcc dirfnlp	;...loop always
 
 direol:
-!ifndef OPTI{
-	jsr crlf	;start a new line
-}
 	jsr stop
 
 	beq disk_done	;...branch if user hit STOP
 	ldy #2
 	bne dirlp	;...loop always
 
-!ifdef P500{
-;!fill 21, $ff
-} else{
-setmod:
-	lda hw_irq
-	cmp #$00
-	bne +
-	lda #$ff
-	!byte $2c	;skip next
-+	lda #$00
-	sta mode
-	jsr primm
-	!pet esc, "h", 0
-	rts
-}
 ; $eb87	outsourced from assem - copy new line to kernal keyboard buffer
 asprint:lda #<keyd
 	sta ptr		;set ptr to kernal keyboard buffer
@@ -2044,7 +1874,6 @@ asprtlp:lda mkeyd,y	;get from monitor key buffer
 	rts
 ; $ebae	setp load/save
 lsinit:	
-!ifdef OPTI{
 	ldy #DEFDEV
 	sty fa		;setup defaults: tape, fixed_load, no filename
 	ldy #1
@@ -2055,16 +1884,6 @@ lsinit:
 	lda #DEFBANK
 	sta eas		;default l/s/v from/to first ram bank 0/1
 	sta stas
-} else{
-	ldy #1
-	sty fa		;setup defaults: tape, fixed_load, no filename
-	sty sa
-	dey		;(.y=0)
-	sty eas		;default l/s/v from/to bank 0
-	sty stas	;default l/s/v from/to bank 0
-	sty status
-	sty fnlen	;default no filename
-}
 	lda #<xcnt
 	sta fnadr	;filename address in monitor bank
 	lda #>xcnt
@@ -2085,10 +1904,10 @@ fparlp:	lda $00,y
 	sta (ptr),y	;copy file parm $90-$92, $96-$a0
 	dey
 	cpy #eal-1	;end of upper part list
-	bne +
+	bne fparskp
 	ldy #fnadr+2	;lower part of list
 	bne fparlp
-+	cpy #fnadr-1	;start of file params
+fparskp:cpy #fnadr-1	;start of file params
 	bne fparlp
 	stx i6509	;restore ibank
 	rts
@@ -2097,11 +1916,7 @@ lsstate:jsr getstat	;get verify state
 	and #$10
 	bne lssterr	;error detected
 	jsr primm
-!ifdef OPTI{
 	!pet " ok", 0
-} else{
-	!pet cr, "ok", cr, 0
-}
 	jmp main
 
 lssterr:jsr primm
@@ -2156,7 +1971,6 @@ goto:
 	ldy yr
 	jmp (t0)	;jump to address
 
-!ifdef OPTI{
 copyfnadr:
 	tya		;length
 	ldx i6509
@@ -2196,8 +2010,3 @@ getdirstat:
 	tax
 	pla
 	rts
\ No newline at end of file
-}
-!ifndef OPTI{
-*= $efff
-	!byte $ff
-}
\ No newline at end of file
